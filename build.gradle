plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "xyz.jpenilla.run-velocity" version "2.2.2"
}

group = 'net.cursedbreath'
version = '0.1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven{
        url = "https://mvn.exceptionflug.de/repository/exceptionflug-public/"
    }
    maven {
        name = "velocity-repo"
        url = "https://maven.elytrium.net/repo/"
    }
}

dependencies {
    compileOnly "com.velocitypowered:velocity-api:3.2.0-SNAPSHOT"
    compileOnly "org.projectlombok:lombok:1.18.30"
    compileOnly "com.velocitypowered:velocity-proxy:3.2.0-SNAPSHOT"
    compileOnly "io.netty:netty-all:4.1.103.Final"

    implementation 'org.apache.logging.log4j:log4j-api:2.22.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.22.1'
    implementation "org.mariadb.jdbc:mariadb-java-client:2.1.2"

    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'com.velocitypowered:velocity-api:3.2.0-SNAPSHOT'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = 16
    targetCompatibility = 16
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks {
    runVelocity {
        // Configure the Velocity version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        velocityVersion("3.3.0-SNAPSHOT")
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
